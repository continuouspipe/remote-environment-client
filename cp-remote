#!/bin/bash
CALLING_DIR=$(pwd)

function help {
	echo "Remote Environment client."
	echo
	echo "Usage:"
	echo "  ${0} command"
	echo 
	echo "Available commands:"
	echo "   setup             Setup the remote environment client and settings"
	echo "   build             Create/Update the remote environment"
	echo "   watch             Watch local changes and synchronize with the remote environment"
	echo "   bash              Open a bash session in the remote environment container"
	echo "   fetch             Sync remote changes to the local filesystem"
	echo "   resync            Sync remote changes to and from the local filesystem"
	echo "   forward           Forward a port to a container"
	echo "   destroy           Destroy the remote environment"
	echo "   checkversion      Check for updates to this tool"
}

function open_anybar {
    if [ -n "$ANYBAR_PORT" ]; then
        trap quit_anybar SIGINT
        ANYBAR_PORT=$ANYBAR_PORT open -a AnyBar
    fi
}

function quit_anybar {
    anybar quit
}

function anybar {
    if [ -n "$ANYBAR_PORT" ]; then
        echo -n "$1" | nc -4u -w0 localhost "$ANYBAR_PORT"
    fi
}


function container_specified {
   if [ -z "$1" ] && [ -z "$(default_container)" ]; then
       echo "You need to specify the container to use with this command"
       exit;
   fi
}

function container {
   if [ -n "$1" ]; then
        echo "$1"
        exit
   fi

   default_container
}

command_exists () {
    type "$1" &> /dev/null ;
}

function dir {
    echo "$CALLING_DIR"
}

function settings_file {
    echo "$(dir)/.cp-remote-env-settings"
}

function project_key {
    echo "$PROJECT_KEY"
}

function remote_name {
    echo "$REMOTE_NAME"
}

function remote_branch {
    echo "$REMOTE_BRANCH"
}

function namespace {
    if [ -n "$CUSTOM_NAMESPACE" ]; then
        echo "$CUSTOM_NAMESPACE"
        return
    else
        echo "$PROJECT_KEY-${REMOTE_BRANCH//\//-}"
    fi
}

function context {
    if [ -n "$KUBERNETES_CONFIG_KEY" ]; then
         echo "$KUBERNETES_CONFIG_KEY"
        return
    else
        echo "$PROJECT_KEY-${REMOTE_BRANCH//\//-}"
    fi
}

function default_container {
    echo "$DEFAULT_CONTAINER"
}

function keen_write_key {
     echo "$KEEN_WRITE_KEY"
}

function keen_project_id {
    echo "$KEEN_PROJECT_ID"
}

function keen_event_collection {
    echo "$KEEN_EVENT_COLLECTION"
}

function pod {
    CONTAINER=$1
    kubectl --context="$(context)" --namespace="$(namespace)" get pods | grep "^$CONTAINER" | awk '{print $1}'
}

function pod_found {
    if [ -z "$1" ]; then
        echo
        echo "The pod could not be found, is your configuration correct and is the specified container name correct?"
        echo
        exit;
    fi
}

function local_branch {
    git rev-parse --abbrev-ref HEAD
}

function validate_settings {

    if [ ! -f "$(settings_file)" ]; then
         echo "The remote settings file is missing, please run the setup command"
         exit;
    fi

    # shellcheck source=/dev/null
    source "$(settings_file)"

    REQUIRED_SETTINGS=( REMOTE_BRANCH REMOTE_NAME PROJECT_KEY)
    for i in "${REQUIRED_SETTINGS[@]}"
    do
    	if [ -z "${!i}" ]; then
    	    echo "Required setting $i missing, please run the setup command"
    	    exit
    	fi
    done
}

function setup {
	if ! command_exists kubectl ; then
		echo "[INSTALL] kubectl is being installed"

		if [[ "$OSTYPE" == "darwin"* ]]; then
			curl -O https://storage.googleapis.com/kubernetes-release/release/v1.4.3/bin/darwin/amd64/kubectl
			chmod +x kubectl
			sudo mv kubectl /usr/local/bin/kubectl
		else
			curl -O https://storage.googleapis.com/kubernetes-release/release/v1.4.3/bin/linux/amd64/kubectl
			chmod +x kubectl
			sudo mv kubectl /usr/bin/kubectl
		fi
	else
		echo "[OK] kubectl found"
	fi
	
	REMOTE_DIR="$(settings_file)"
    
    read -r -p "What is your Continuous Pipe project key? " PROJECT_KEY
    read -r -p "What is the name of the Git branch you are using for your remote environment? " REMOTE_BRANCH
    read -r -p "What is your github remote name? (defaults to: origin) " REMOTE_NAME
    read -r -p "What is the default container for the watch, bash, fetch and resync commands? (Optional) " DEFAULT_CONTAINER
    read -r -p "What is the IP of the cluster? " CLUSTER_IP
    read -r -p "What is the cluster username? " USERNAME
    read -r -p "What is the cluster password? " PASSWORD
    read -r -p "If you want to use AnyBar, please provide a port number e.g 1738 ? " ANYBAR_PORT
    read -r -p "What is your keen.io write key? (Optional, only needed if you want to record usage stats) " KEEN_WRITE_KEY
    read -r -p "What is your keen.io project id? (Optional, only needed if you want to record usage stats) " KEEN_PROJECT_ID
    read -r -p "What is your keen.io event collection?  (Optional, only needed if you want to record usage stats) " KEEN_EVENT_COLLECTION

    REMOTE_NAME="${REMOTE_NAME:-origin}"
    NAMESPACE="$PROJECT_KEY-${REMOTE_BRANCH//\//-}"

    {
        echo "PROJECT_KEY=$PROJECT_KEY";
        echo "REMOTE_BRANCH=$REMOTE_BRANCH";
        echo "REMOTE_NAME=$REMOTE_NAME";
        echo "DEFAULT_CONTAINER=$DEFAULT_CONTAINER";
        echo "ANYBAR_PORT=$ANYBAR_PORT"
        echo "KEEN_WRITE_KEY=$KEEN_WRITE_KEY"
        echo "KEEN_PROJECT_ID=$KEEN_PROJECT_ID"
        echo "KEEN_EVENT_COLLECTION=$KEEN_EVENT_COLLECTION"
        echo "ANYBAR_PORT=$ANYBAR_PORT"
        echo "# Do not change the KUBERNETES_CONFIG_KEY. If it has been changed please run the setup command again"
        echo "KUBERNETES_CONFIG_KEY=$NAMESPACE"
    } > "$REMOTE_DIR"
    echo "Remote settings written to $REMOTE_DIR"

    kubectl config set-credentials "$NAMESPACE-$USERNAME" --username="$USERNAME" --password="$PASSWORD"
    kubectl config set-cluster "$NAMESPACE" --server="https://$CLUSTER_IP" --insecure-skip-tls-verify=true
    kubectl config set-context "$NAMESPACE" --cluster="$NAMESPACE" --user="$NAMESPACE-$USERNAME"

    echo "Created the context " "$NAMESPACE"
    echo
    echo "Run 'kubectl --context=$(context) cluster-info' to verify the connectivity."
    echo
}

function log {
    PROJECT_ID="$(keen_project_id)"
    WRITE_KEY="$(keen_write_key)"
    EVENT_COLLECTION="$(keen_event_collection)"

    if [ -z "$PROJECT_ID" ] || [ -z "$WRITE_KEY" ] || [ -z "$EVENT_COLLECTION" ]; then
    	echo "Not logging usage stats as keen.io details not set"
    	exit 0
    else
    	echo "Logging usage stats to keen.io"
    fi

    END_TIME="$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
    PAYLOAD='{"project": "'"$(project_key)"'" ,"namespace": "'"$(namespace)"'","command": "'"$1"'","start-time": '$2',"end-time": '$END_TIME'}'
    curl -s "https://api.keen.io/3.0/projects/$PROJECT_ID/events/$EVENT_COLLECTION?api_key=$WRITE_KEY" -H "Content-Type: application/json" -d "$PAYLOAD" >/dev/null
}

function build {
    START_TIME="$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
    ensure_new_commit
    push_to_remote
    log "build" "$START_TIME"
}

function ensure_new_commit {
    git ls-remote --exit-code --quiet  . "$(remote_name)/$(remote_branch)"
    rc=$?; if [[ $rc != 0 ]]; then
        return
    fi

    git diff --exit-code --quiet "$(local_branch)" "$(remote_name)/$(remote_branch)"
    rc=$?; if [[ $rc = 0 ]]; then
        echo "No changes so making an empty commit to force rebuild";
        git commit --allow-empty -m "Add empty commit to force rebuild on continuous pipe"
    fi
}

function push_to_remote {
    echo "Pushing to remote"
    git push --force "$(remote_name)" "$(local_branch):$(remote_branch)"

    echo
    echo "Continuous Pipe will now build your developer environment"
    echo
    echo "You can see when it is complete and find its IP address at https://ui.continuouspipe.io/"
    echo
    echo "Please wait unti the build is complete to use any of this tool's other commands."
    echo
}

function delete_remote {
    echo "Destroying remote environment"
    echo "Deleting remote branch"
    git push "$(remote_name)" --delete "$(remote_branch)"

    echo "Continuous Pipe will now destroy the remote environment"
}

function ssh {
    echo "'cp-remote ssh' is deprecated, please use 'cp-remote bash'"
    bash "$@"
}

function sh {
    bash "$@"
}

function bash {
    POD="$(pod "$1")"
    pod_found "$POD"
    cmd="kubectl --context=\"$(context)\" --namespace=\"$(namespace)\" exec -it $POD -- /bin/bash"
    echo "Running: '${cmd}'."
    eval "${cmd}"
}

function watch {
    open_anybar
    # Sync latency / speed in seconds
    LATENCY="1"
    PROJECT_DIR_WITH_DOT="$(dir)/."
    POD="$(pod "$1")"
    pod_found "$POD"

    echo "The watch command will need to be restarted after rebuilding the remote environment"
    # Watch for changes and sync (exclude hidden files)
    echo    "Watching for changes. Quit anytime with Ctrl-C."
    anybar green
    fswatch -0 -r -l "$LATENCY" --exclude="/\.[^/]*$" --exclude="\.idea" --exclude="\.git" --exclude="___jb_old___" --exclude="___jb_tmp___" $(dir) \
    | while read -r -d "" event
      do
        anybar orange
        echo "$(date)" "\"$event\" changed. Synchronizing... "
        file="${event/$(dir)/$PROJECT_DIR_WITH_DOT}"
        echo

        rsync --relative -rlptDv -e 'kubectl --context='"$(context)"' --namespace='"$(namespace)"' exec -i '"$POD" -- "$file" --:/app
        echo "done."
        anybar green
      done
}

function resync {
    open_anybar
    START_TIME="$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
    POD=$(pod "$1")
    pod_found "$POD"

    git stash save -q --keep-index

    rc=$?; if [[ $rc != 0 ]]; then
        echo "Stashing your existing local changes failed so the resync was cancelled."
        exit
    fi
    anybar red
    rsync -zrlptDv --blocking-io  --force --exclude=".*" \
        -e 'kubectl --context='"$(context)"' --namespace='"$(namespace)"' exec -i '"$POD" -- --:/app/ "$(dir)"

    git reset --hard -q && git stash apply --index -q && git stash drop -q

    rsync -zrlptDv --blocking-io  --force --exclude=".*" \
        -e 'kubectl  --context='"$(context)"' --namespace='"$(namespace)"' exec -i '"$POD" -- "$(dir)/." --:/app

    anybar green
    log "resync" "$START_TIME"
}

function fetch {
    open_anybar
    START_TIME="$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
    POD=$(pod "$1")
    pod_found "$POD"

    rsync -zrlptDv --blocking-io  --force --exclude=".*" \
        -e 'kubectl --context='"$(context)"' --namespace='"$(namespace)"' exec -i '"$POD" -- --:/app/ "$(dir)"

    anybar green
    log "fetch" "$START_TIME"
}

function port_forward {
    POD=$(pod "$1")
    pod_found "$POD"

    if [[ -z "$2" ]]; then
        echo "Please specify the port number to be forwarded."
        exit
    fi

    LOCAL_PORT="$2"

    if [[ -z $3 ]]; then
        echo "Using same port number for local and remote."
        REMOTE_PORT="$2"
    else
        REMOTE_PORT="$3"
    fi

    kubectl --context="$(context)" --namespace="$(namespace)" port-forward "$POD" "$LOCAL_PORT":"$REMOTE_PORT"
}

function check_version {

    CURRENT_VERSION=$(grep "^# Version" "${0}" | head -1 | awk '{print $3}')
    LATEST_VERSION=$(curl -s https://raw.githubusercontent.com/continuouspipe/remote-environment-client/gh-pages/downloads/cp-remote-latest | grep "^# Version" | head -1 | awk '{print $3}')

    if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
        echo
        echo "You do not have the latest version of this tool."
        echo
        echo "You are using version $CURRENT_VERSION"
        echo "To install $LATEST_VERSION run:"
        echo
        echo "sudo curl https://continuouspipe.github.io/remote-environment-client/downloads/cp-remote-latest > /usr/local/bin/cp-remote && chmod +x /usr/local/bin/cp-remote"
        echo
    else
        echo
        echo "You are using the latest version ($LATEST_VERSION) of this tool"
    fi

}

case $1 in
    -h|--help|help)
    help
    exit 0
    ;;
    setup|build|watch|ssh|bash|destroy|fetch|resync|forward|checkversion)
    COMMAND="$1"
    ;;
    *)
        echo "Unknown option: $1"
    ;;
esac

if [ -z "${COMMAND+x}" ]; then
	help
	exit 0
fi

for i in "$@"
do
    case $i in
        -n=*|--namespace=*)
        CUSTOM_NAMESPACE="${i#*=}"
        shift # past argument=value
        ;;
        *)
                # unknown option
        ;;
    esac
done

case $COMMAND in
	setup)
		setup
		;;
    watch)
        validate_settings
        container_specified "$2"
        watch "$(container "$2")"
        ;;
    build)
        validate_settings
        build
        ;;
    bash)
        validate_settings
        container_specified "$2"
        bash "$(container "$2")"
        ;;
    ssh)
        validate_settings
        container_specified "$2"
        ssh "$(container "$2")"
        ;;
    destroy)
        validate_settings
        delete_remote
        ;;
    resync)
        validate_settings
        container_specified "$2"
        resync "$(container "$2")"
        ;;
    fetch)
        validate_settings
        container_specified "$2"
        fetch "$(container "$2")"
        ;;
    forward)
        container_specified "$2"
        validate_settings
        port_forward "$2" "$3" "$4"
        ;;
    checkversion)
        check_version
        ;;
	*)
		echo "Command not found: $COMMAND"
		echo
		help
		exit 1
		;;
esac
