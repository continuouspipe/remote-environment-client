#!/bin/bash

CALLING_DIR=$(pwd)

function help {
	echo "Remote Environment client."
	echo
	echo "Usage:"
	echo "  "$0" command"
	echo 
	echo "Available commands:"
	echo "   setup             Setup the remote environment client and settings"
	echo "   setup:client      Setup the remote environment client"
	echo "   setup:remote      Set the remote settings"
	echo "   create            Create the remote environment"
	echo "   watch             Watch local changes and synchronize with the remote environment"
	echo "   ssh               SSH into the remote environment container"
	echo "   build             Update the remote environment with local changes"
	echo "   destroy           Destroy the remote environment"
}

command_exists () {
    type "$1" &> /dev/null ;
}

function dir {
    echo $CALLING_DIR
}

function remote_name {
    echo $(read_setting 3)
}

function remote_branch {
    echo $(read_setting 2)
}

function namespace {
    echo $(read_setting 1)
}

function pod {
    echo `kubectl --namespace=$(namespace) get pods | grep $1 | awk '{print $1}'`
}

function local_branch {
    echo `git rev-parse --abbrev-ref HEAD`
}

function read_setting {
    SETTING=`sed "$1q;d" $(dir)/.remote`
    if [ -z "$SETTING" ]; then
        echo "The remote settings are missing, please run the setup command"
        exit;
    fi
    echo $SETTING
}

function setup_kubectl {
	if ! command_exists kubectl ; then
		echo "[INSTALL] kubectl is being installed"

		if [[ "$OSTYPE" == "darwin"* ]]; then
			curl -O https://storage.googleapis.com/kubernetes-release/release/v1.4.3/bin/darwin/amd64/kubectl
			chmod +x kubectl
			sudo mv kubectl /usr/local/bin/kubectl
		else
			curl -O https://storage.googleapis.com/kubernetes-release/release/v1.4.3/bin/linux/amd64/kubectl
			chmod +x kubectl
			sudo mv kubectl /usr/bin/kubectl
		fi
	else
		echo "[OK] kubectl found"
	fi

    read -p "What is the name of the context? " CONTEXT_NAME
    read -p "What is the IP of the cluster? " CLUSTER_IP
    read -p "What is the username? " USERNAME
    read -p "What is the password? " PASSWORD
    read -p "What is the default namespace you want to use? " NAMESPACE

    kubectl config set-credentials $CONTEXT_NAME-$USERNAME --username=$USERNAME --password=$PASSWORD
    kubectl config set-cluster $CONTEXT_NAME --server=https://$CLUSTER_IP --insecure-skip-tls-verify=true
    kubectl config set-context $CONTEXT_NAME --cluster=$CONTEXT_NAME --user=$CONTEXT_NAME-$USERNAME
    kubectl config use-context $CONTEXT_NAME

    echo "Created the context " $CONTEXT_NAME
    echo
    echo "Run 'kubectl cluster-info' to verify the connectivity."
    echo
}

function setup_remote {
    REMOTE_DIR="$(dir)/.remote"

    read -p "What is the namespace you are using? " NAMESPACE_NAME
    echo $NAMESPACE_NAME > $REMOTE_DIR

    read -p "What is your remote environment branch you are using? " REMOTE_BRANCH
    echo $REMOTE_BRANCH >> $REMOTE_DIR

    read -p "What is your github remote name? " REMOTE_NAME
    echo $REMOTE_NAME >> $REMOTE_DIR

    echo "Remote settings written to $REMOTE_DIR"
}

function setup {
    setup_kubectl
    setup_remote
}

function build {
    ensure_new_commit
    push_to_remote
}

function ensure_new_commit {
    git diff --exit-code --quiet $(local_branch) $(remote_name)/$(remote_branch)
    rc=$?; if [[ $rc = 0 ]]; then
        echo "No changes so making timestamp update only commit to force rebuild";
        #gdate +%s > $DIR/../timestamp
        #git commit $DIR/../timestamp -m "Update timestamp to force rebuild on continuous pipe"
    fi
}

function push_to_remote {
    echo "Pushing to remote"
    #git push --force $(remote_name) $(local_branch)):$(remote_name)

    echo "Continuous Pipe will now build your developer environment"
}

function ssh {
    cmd="kubectl --namespace=$(namespace) exec -it $(pod) -- /bin/bash"
    echo "Running: '${cmd}'."
    eval ${cmd}
}

function watch {
    # Sync latency / speed in seconds
    LATENCY="1"

    PROJECT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
    PROJECT_DIR_WITH_DOT="$PROJECT_DIR/."

    # Watch for changes and sync (exclude hidden files)
    echo    "Watching for changes. Quit anytime with Ctrl-C."
    fswatch -0 -r -l $LATENCY .. --exclude="/\.[^/]*$" --exclude="\.idea" --exclude="\.git" --exclude="___jb_old___" --exclude="___jb_tmp___" \
    | while read -d "" event
      do
        echo `date` "\"$event\" changed. Synchronizing... "
        file="${event/$PROJECT_DIR/$PROJECT_DIR_WITH_DOT}"
        echo $result_string

        rsync --relative -rlptDv -e 'kubectl --namespace='$(namespace)' exec -i '$(pod) -- $file --:/app
        echo "done."
      done
}

#while [[ $# -gt 0 ]]; do
	case $1 in
	    -h|--help|help)
	    help
	    exit 0
	    ;;
	    setup|setup:client|setup:remote|create|build|watch|ssh)
	    COMMAND=$1
	    ;;
	    *)
	        echo "Unknown option: "$1
	    ;;
	esac

#	shift
#done

if [ -z ${COMMAND+x} ]; then 
	help
	exit 0
fi

case $COMMAND in
	setup)
		setup
		;;
	setup:client)
        setup_kubectl
        ;;
    setup:remote)
        setup_remote
        ;;
	create)
    	push_to_remote
    	;;
    watch)
        watch
        ;;
    build)
        build
        ;;
    ssh)
        ssh $2
        ;;
	*)
		echo "Command not found: "$COMMAND
		echo
		help
		exit 1
		;;
esac
